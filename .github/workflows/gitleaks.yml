name: Gitleaks Scan

on:
  workflow_call:

jobs:
  gitleaks-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository that triggered the workflow
      - name: Checkout repository code
        uses: actions/checkout@v4

      # Restore the Gitleaks binary cache
      # Note that the cache is stored only if the flow execution 
      # is successful. In other words, only if all the steps 
      # complete without errors (no leaks detected) will the files 
      # be cached.
      - name: Restore Gitleaks Binary Cache
        id: gitleaks-cache
        uses: actions/cache@v4
        with:
          path: .gitleaks  # Cache directory
          key: gitleaks-v8.21.1
          
            # Checkout the Gitleaks source code
      - name: Checkout Gitleaks
        if: steps.gitleaks-cache.outputs.cache-hit != 'true' # execute only if cache missed
        uses: actions/checkout@v4
        with:
          repository: gitleaks/gitleaks
          ref: v8.21.1
          path: gitleaks-source  # Check out Gitleaks to a specific directory

      # Install Go
      - name: Set up Go
        if: steps.gitleaks-cache.outputs.cache-hit != 'true' # execute only if cache missed
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'  # Specify Go version to install

      # Build Gitleaks
      - name: Build Gitleaks
        if: steps.gitleaks-cache.outputs.cache-hit != 'true' # execute only if cache missed
        run: |
          make -C gitleaks-source build                     # Build Gitleaks from the gitleaks-source directory
          mkdir -p .gitleaks                                # Create the directory for caching
          mv gitleaks-source/gitleaks .gitleaks/gitleaks    # Move the binary to the cache path

      # Run Gitleaks scan on the repository
      - name: Run Gitleaks
        run: |
          ./.gitleaks/gitleaks detect --source . --redact -v --report-format=sarif --report-path=results.sarif --log-level=debug --log-opts=--no-merges

      # Upload the scan report as an artifact if scan fails (leak detected)
      - name: Upload Gitleaks report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: results.sarif

      # Fail the build if Gitleaks detects any secrets
      - name: Check for leaks
        run: |
          # Check if there are any "results" in the SARIF JSON file
          leaks=$(jq '.runs[0].results | length' results.sarif)

          if [ "$leaks" -gt 0 ]; then
            echo "Secrets detected in the PR!"
            jq '.runs[0].results[] | {message: .message.text, file: .locations[0].physicalLocation.artifactLocation.uri, line: .locations[0].physicalLocation.region.startLine}' results.sarif
            exit 1
          else
            echo "No secrets detected in PR."
          fi
